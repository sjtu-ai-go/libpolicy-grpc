syntax = "proto3";
package gocnn;

message RequestV1 {
	int32 board_size = 1;
	repeated bool our_group_lib1 = 2; // [true, false] * boardsize^2
	repeated bool our_group_lib2 = 3; 
	repeated bool our_group_lib3_plus = 4;
	repeated bool oppo_group_lib1 = 5;
	repeated bool oppo_group_lib2 = 6;
	repeated bool oppo_group_lib3_plus = 7;
}

message ResponseV1 {
	int32 board_size = 1;
	repeated float possibility = 2; // [float] * boardsize^2
}
message RequestV2{
	int32 board_size = 1;
	/* stone colors */
	repeated bool our_stone = 2;
	repeated bool oppo_stone = 3;
	repeated bool empty_stone = 4;
	
	/* stone with how many turns since a move was played */
	repeated bool turn_since1 = 5;
	repeated bool turn_since2 = 6;
	repeated bool turn_since3 = 7;
	repeated bool turn_since4 = 8;
	repeated bool turn_since5 = 9;
	repeated bool turn_since6 = 10;
	repeated bool turn_since7 = 11;
	repeated bool turn_since8_plus = 12;
	
	/* number of liberties */
	repeated bool lib1 = 13;
	repeated bool lib2 = 14;
	repeated bool lib3 = 15;
	repeated bool lib4 = 16;
	repeated bool lib5 = 17;
	repeated bool lib6 = 18;
	repeated bool lib7 = 19;
	repeated bool lib8_plus = 20;
	
	/* number of liberties after this move is played */
	repeated bool after_move_lib1 = 21;
	repeated bool after_move_lib2 = 22;
	repeated bool after_move_lib3 = 23;
	repeated bool after_move_lib4 = 24;
	repeated bool after_move_lib5 = 25;
	repeated bool after_move_lib6 = 26;
	repeated bool after_move_lib7 = 27;
	repeated bool after_move_lib8_plus = 28;
	
	/* how many opponent stones would be captured */
	repeated bool cap_oppo_size1 = 29;
	repeated bool cap_oppo_size2 = 30;
	repeated bool cap_oppo_size3 = 31;
	repeated bool cap_oppo_size4 = 32;
	repeated bool cap_oppo_size5 = 33;
	repeated bool cap_oppo_size6 = 34;
	repeated bool cap_oppo_size7 = 35;
	repeated bool cap_oppo_size8_plus = 36;
	
	/* how many of own stones would be captured */
	repeated bool cap_our_size1 = 37;
	repeated bool cap_our_size2 = 38;
	repeated bool cap_our_size3 = 39;
	repeated bool cap_our_size4 = 40;
	repeated bool cap_our_size5 = 41;
	repeated bool cap_our_size6 = 42;
	repeated bool cap_our_size7 = 43;
	repeated bool cap_our_size8_plus = 44;
	
	/* whether a move is legal and does not fill its own eyes */
	repeated bool not_fill_own_eyes = 45;
	
	/* ko */
	repeated bool ko = 46;
	
	/* border */
	repeated bool border = 47;
	
	/* exp(−.5 ∗ distance^2 ) to the board center */
	repeated float position = 48;
	
	/* constant planes */
	repeated bool ones = 49;
	repeated bool zeros = 50;
}
